#!/usr/bin/env ruby

require 'pp'

require File.expand_path(File.join(File.dirname(__FILE__), "../lib/testflight/config.rb"))
require File.expand_path(File.join(File.dirname(__FILE__), "../lib/testflight/prompter.rb"))

XCODE_BUILDER       = "/usr/bin/xcodebuild"
XCODE_PACKAGER      = "/usr/bin/xcrun"
TESTFLIGHT_ENDPOINT = "http://testflightapp.com/api/builds.json"

# read project definition
# read app version and build number
# add all files to git and commit files
# tag git with the version and build
# build files 
# package files
# deploy to testflight app

####################################################################################
## Building Project 
####################################################################################

def build_workspace
  cmd = "#{XCODE_BUILDER} -workspace '#{Testflight::Config.workspace_name}' "
  cmd << "-scheme '#{Testflight::Config.application_name}' "
  cmd << "-sdk 'iphoneos6.0' "
  cmd << "-configuration 'AdHoc' "
  cmd << "-arch 'armv6 armv7' "
  cmd << "CONFIGURATION_BUILD_DIR='#{Testflight::Config.build_dir}' "
  pp "Building Workspace..."
  pp cmd
  unless system(cmd)
    pp "Failed to build workspace"
    exit 1
  end
end

def build_project
  cmd = "#{XCODE_BUILDER} -target '#{Testflight::Config.application_name}' "
  cmd << "-sdk 'iphoneos6.0' "
  cmd << "-configuration 'AdHoc' "

  pp "Building Project..."
  pp cmd
  unless system(cmd)
    pp "Failed to build project"
    exit 1
  end
end

####################################################################################
## Packaging Project 
####################################################################################

def package_workspace
  cmd = "#{XCODE_PACKAGER} -sdk iphoneos PackageApplication "
  cmd << "-v '#{Testflight::Config.build_dir}/#{Testflight::Config.application_name}.app' "
  cmd << "-o '#{Testflight::Config.distribution_file}' "
  cmd << "--sign '#{Testflight::Config.developer_name}' "
  cmd << "--embed '#{Testflight::Config.provisioning_dir}/#{Testflight::Config.ad_hoc_provisioning_name}'"
  
  pp "Packaging Workspace..."
  pp cmd
  unless system(cmd)
    pp "Failed to package workspace"
    exit 1
  end
end

def package_project
  cmd = "#{XCODE_PACKAGER} -sdk iphoneos PackageApplication "
  cmd << "-v '#{Testflight::Config.build_dir}/AdHoc-iphoneos/#{Testflight::Config.application_name}.app' "
  cmd << "-o '#{Testflight::Config.distribution_file}' "
  cmd << "--sign '#{Testflight::Config.developer_name}' "
  cmd << "--embed '#{Testflight::Config.provisioning_dir}/#{Testflight::Config.ad_hoc_provisioning_name}'"
  
  pp "Packaging Project..."
  pp cmd
  unless system(cmd)
    pp "Failed to package project"
    exit 1
  end
end

####################################################################################
## Uploading Project 
####################################################################################

def upload_to_testflightapp
  pp "Uploading to TestFlightApp..."

  notes = Testflight::Prompter.read_info("What has changed in this build?")

  lists = Testflight::Prompter.select_set("Which distribution lists would you like to send this build to? Select one or more lists, separated with comma.", Testflight::Config.distribution_lists)

  notify = Testflight::Prompter.read_options("Would you like to notify your team members by email about this build?")
  ["y", "yes"].include?(notify) ? notify = "true" : notify = "false"

  cmd = "curl #{TESTFLIGHT_ENDPOINT} "
  cmd << "-F file=@#{Testflight::Config.distribution_file} "
  cmd << "-F api_token=#{Testflight::Config.api_token} "
  cmd << "-F team_token=#{Testflight::Config.team_token} "
  cmd << "-F notify=#{notify} "
  cmd << "-F distribution_lists=#{lists.join(",")} "
  cmd << "-F notes='#{notes}'"

  pp cmd
  unless system(cmd)
    pp "Failed to upload to testflight"
    exit 1
  end
end

####################################################################################
## Project Versioning
####################################################################################

def increment_bundle_version
  Testflight::Config.project_info["CFBundleVersion"] = (Testflight::Config.build_number.to_i + 1).to_s
  pp "Incrementing bundle version to #{Testflight::Config.build_number}..."
  
  File.open(Testflight::Config.project_info_path, "w") do |f| 
    f.write(Testflight::Config.project_info.to_plist) 
  end
  @project_info = nil
end

####################################################################################
## Git Support
####################################################################################
def update_git_ignore
  # build
  # Distributions
  # Provisioning
  # .testflight  
end

def commit_changes(msg)
  system("git add .")
  system("git add . --update")
  system("git commit -m '#{msg}'")
  system("git push")
  
  system("git tag -a #{Testflight::Config.project_version_short} -m 'Release #{Testflight::Config.project_version}'")
end

####################################################################################
## Main 
####################################################################################

def deploy
  Testflight::Config.setup

  if Testflight::Config.commit_changes?
    commit_changes("Preparing build #{Testflight::Config.project_version}")
  end
  
  if Testflight::Config.workspace?
    build_workspace
    package_workspace
  else
    build_project
    package_project
  end  
  
  upload_to_testflightapp
  
  pp ""
  
  if Testflight::Config.increment_bundle?
    increment_bundle_version
    if Testflight::Config.commit_changes?
      commit_changes("Incrementing build number to #{Testflight::Config.project_version}")
    end
  end
  
  pp "Congratulations! The app has been deployed!"
end

deploy


